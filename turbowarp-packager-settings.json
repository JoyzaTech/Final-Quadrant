{"packagedRuntime":false,"cloudVariables":{"mode":"ws","cloudHost":"wss://clouddata.turbowarp.org","custom":{"☁ Map Data":"ws","☁ User Data":"ws","☁ Faction Data":"ws","☁ Planet Data 1":"ws","☁ Planet Data 2":"ws","☁ Planet Data 3":"ws","☁ Planet Data 4":"ws","☁ Planet Register Data":"ws"},"specialCloudBehaviors":false,"unsafeCloudBehaviors":false},"turbo":false,"interpolation":false,"framerate":30,"highQualityPen":false,"maxClones":300,"fencing":true,"miscLimits":true,"stageWidth":480,"stageHeight":360,"resizeMode":"preserve-ratio","autoplay":false,"username":"player####","closeWhenStopped":false,"projectId":"p4-@Final Quadrant.sb3","custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#ff4c4c"},"loadingScreen":{"progressBar":true,"text":"","imageMode":"normal","image":null},"controls":{"greenFlag":{"enabled":false},"stopAll":{"enabled":false},"fullscreen":{"enabled":false},"pause":{"enabled":false}},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"compiler":{"enabled":true,"warpTimer":false},"target":"html","app":{"icon":null,"packageName":"final-quadrant","windowTitle":"Final Quadrant","windowMode":"window","version":"1.0.0","escapeBehavior":"unfullscreen-only","windowControls":"default"},"chunks":{"gamepad":false,"pointerlock":false},"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"steamworks":{"appId":"480","onError":"warning"},"extensions":["https://extensions.turbowarp.org/SharkPool/Camera.js","https://extensions.turbowarp.org/Lily/TempVariables2.js","data:text/javascript;base64,","https://extensions.turbowarp.org/text.js","https://extensions.turbowarp.org/Lily/ClonesPlus.js","data:text/javascript;base64,","https://extensions.turbowarp.org/Skyhigh173/json.js","https://extensions.turbowarp.org/numerical-encoding-2.js","https://extensions.turbowarp.org/Lily/Skins.js","https://extensions.turbowarp.org/Lily/LooksPlus.js","https://extensions.turbowarp.org/lab/text.js","https://extensions.turbowarp.org/TheShovel/ShovelUtils.js","data:text/javascript;base64,","https://extensions.turbowarp.org/true-fantom/math.js"],"bakeExtensions":true,"maxTextureDimension":2048}